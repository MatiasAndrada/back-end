/*
!PLATAFORMA AWS

*Amazon Web Services (AWS) es una plataforma en la nube muy adoptada y completa.
*Ofrece m√°s de 200 servicios integrales de centros de datos a nivel global. Muchas empresas lo utilizan y con esto reducen los costos, aumentan su agilidad e innovan de forma m√°s r√°pida.

En esta clase utilizaremos la plataforma Elastic Beanstalk de AWS para implementar aplicaciones NodeJS en la nube.

Usaremos tambi√©n Amazon DynamoDB que es un servicio de base de datos NoSQL r√°pido y flexible, completamente administrado en la nube, compatible con modelos de almacenamiento de valor de clave y de documentos.
Tambien exite RDS que es una base relacional.



!CREAR NUESTRA APP EN ELASTIC BEANSTALK

1)Para comenzar la implementaci√≥n debemos iniciar sesi√≥n en la consola de AWS entrando a Consola AWS
2)Luego, elegimos la opci√≥n de usuario ra√≠z, ponemos mail y contrase√±a e ingresamos.
3)En la consola de AWS elegimos la opci√≥n de Elastic Beanstalk y luego vamos al bot√≥n de crear aplicaci√≥n.
4)Elegimos el nombre de la aplicaci√≥n, en este caso serveraws-ch y luego la plataforma que se corresponde al lenguaje utilizado, que es NodeJs.
5)En c√≥digo de aplicaci√≥n seleccionamos aplicaci√≥n de prueba y luego vamos a configurar m√°s opciones y elegimos la configuraci√≥n personalizada.
6)Luego, modificamos la capacidad, configurando el tipo de entorno como carga balanceada. En el balanceador de carga configuramos las instancias con un m√≠nimo de 2 y un m√°ximo de 4.
7)Vamos hasta abajo de la p√°gina y clickeamos el bot√≥n de crear una aplicaci√≥n con estos cambios que hicimos en la configuraci√≥n.
*Elastic Beanstalk suele tardar unos minutos en crear el entorno y cada uno los recursos que administra.
8)Una vez finalizada la instalaci√≥n, haciendo click en el link seleccionado ya podemos ir a nuestra aplicaci√≥n, donde veremos una ventana como la mostrada en la imagen.

!Configuraci√≥n de nuestra App
1)Vamos a Servicios > IAM > Roles, seleccionamos el rol asociado a instancias EC2, y le asociamos las siguientes pol√≠ticas para usar base de datos y servicios de mensajer√≠a:
AmazonDynamoDBFullAccess
AmazonSNSFullAccess
?Configuraci√≥n de nuestra App - DynamoDB
2)Luego, ingresamos a Servicios > DynamoDB > Tablas. Ah√≠ creamos las tablas que vamos a necesitar en nuestra base de datos para la aplicaci√≥n. Elegimos el nombre (en este caso: ‚Äòproduct-inventory‚Äô), la clave primaria (‚ÄòproductId‚Äô) que figura como partition key, y clickeamos el bot√≥n de crear.
3)Una vez creada la tabla, ya est√° lista para crear elementos en ella.
?Configuraci√≥n de nuestra App - SNS
1)Luego vamos Servicios -> SNS -> T√≥picos y creamos un t√≥pico nuevo: notificaciones
2)Elegimos la configuraci√≥n est√°ndar y aceptamos al final de la p√°gina.
3)Deber√≠a aparecer una confirmaci√≥n de la creaci√≥n del t√≥pico, con un ARN asociado. Debemos copiar ese c√≥digo para usarlo m√°s adelante:
4)Luego vamos a suscripciones, y creamos una nueva suscripci√≥n. Esto nos permitir√° recibir notificaciones cada vez que se publique un nuevo evento en el t√≥pico creado:
5)Seleccionamos el t√≥pico al cual suscribirnos, el medio de suscripci√≥n (email en este caso) e ingresamos el destinatario (nuestra direcci√≥n de mail).
6)La suscripci√≥n est√° creada pero para que est√© activa debemos confirmarla mediante un link enviado a la direcci√≥n de la suscripci√≥n:
&)De esta forma, con esta p√°gina que se nos abre queda confirmada nuestra suscripci√≥n.
    











?Elastic Branstalk cuenta con una serie de recursos:

*Instancia EC2:
M√°quina virtual de Amazon Elastic Compute Cloud (Amazon EC2) configurada para ejecutar aplicaciones web en la plataforma que elija. Cada plataforma ejecuta un conjunto espec√≠fico de software, archivos de configuraci√≥n y scripts compatibles con una determinada versi√≥n de lenguaje, marco de trabajo y contenedor web (o una combinaci√≥n de estos). La mayor√≠a de las plataformas utilizan Apache o nginx como un proxy inverso que se sit√∫a delante de la aplicaci√≥n web, reenv√≠a las solicitudes a esta, administra los recursos est√°ticos y genera registros de acceso y errores.

*Grupo de seguridad de la instancia:
Grupo de seguridad de Amazon EC2 configurado para permitir el tr√°fico entrante en el puerto 80. Este recurso permite que el tr√°fico HTTP procedente del balanceador de carga llegue a la instancia EC2 en la que se ejecuta la aplicaci√≥n web. De forma predeterminada, el tr√°fico no est√° permitido en otros puertos.
*Balanceador de carga:
Balanceador de carga de Elastic Load Balancing que est√° configurado para distribuir solicitudes a las instancias que se ejecutan en la aplicaci√≥n. Tambi√©n permiten que las instancias no est√©n expuestas directamente a Internet.
*Grupo de seguridad del balanceador de carga:
Grupo de seguridad como el de la instancia. 
*Grupo de Auto Scaling:
Est√° configurado para reemplazar una instancia si termina o deja de estar disponible.
*Bucket de Amazon S3:
Ubicaci√≥n de almacenamiento para el c√≥digo fuente, los registros y otros artefactos que se crean al utilizar Elastic Beanstalk.
*Alarmas de Amazon CloudWatch:
Dos alarmas de CloudWatch que monitoriean la carga recibida por las instancias y que se activan si la carga es demasiado alta o demasiado baja. Cuando se activa una alarma, en respuesta, el grupo de Auto Scaling aumenta o reduce los recursos.
*Plataforma de AWS CloudFormation:
Elastic Beanstalk utiliza AWS CloudFormation para lanzar los recursos del entorno y propagar los cambios de configuraci√≥n.
*Nombre de dominio:
Nombre de dominio que direcciona el tr√°fico a la aplicaci√≥n web con el formato subdominio.region.elasticbeanstalk.com.



























üëâ Ten en cuenta que al crearnos una cuenta en AWS nos piden una tarjeta de cr√©dito.
Sin embargo, si hacemos las pruebas y luego lo borramos ser√° sin cargo.


*/